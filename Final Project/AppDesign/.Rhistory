knitr::opts_chunk$set(echo = TRUE)
library(shiny); runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
install.packages("shiny")
library(shiny); runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
install.packages("shiny")
library(shiny); runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
install.packages("shiny")
library(shiny); runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
install.packages("shiny")
library(shiny); runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
install.packages("shiny")
library(shiny); runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
install.packages("shiny")
library(shiny); runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
install.packages("shiny")
install.packages(c("tidyverse", "leaflet", "sf", "ggplot2", "shiny.", "tidycensus"))
library(shiny); runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
##Way to check if already downloaded, and if not, download it:
if (!require(tidycensus)) install.packages("tidycensus"); require(tidycensus)
#Also installing packages needed for examples here:
if (!require(tidyverse)) install.packages("tidyverse"); require(tidyverse)
if (!require(ggplot2)) install.packages("ggplot2"); require(ggplot2)
census_api_key("308afb6a1b31e9fca538c651400ae9f1c3026131", install = TRUE)
readRenviron("~/.Renviron")
#For the 2000 and 2010 and 2020(default) census datasets
#Used to fill a dataframe w data:
age20 <- get_decennial(geography = "state",  #Filter data by state
variables = "P13_001N", #What statistic are we looking for, this means average age (SEE BELOW)
year = 2020,  #year you want the data from
sumfile = "dhc")   #Where do we want the data to come from, this is Demographic and Housing Characteristics
age20
#PLOTTING IT
age20 %>%
ggplot(aes(x = value, y = reorder(NAME, value))) +
geom_point()
#American Community Survey (ACS) --
#data are available from the 1-year ACS since 2005 for geographies of population 65,000 and greater, and from the 5-year ACS for all geographies down to the block group level starting with the 2005-2009 dataset.
#THIS DATA IS BASED ON SAMPLING NOT POP LIKE DECENNIAL but is yearly
vt <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "VT",
year = 2021)
vt
#Graphing
vt %>%
mutate(NAME = gsub(" County, Vermont", "", NAME)) %>%
ggplot(aes(x = estimate, y = reorder(NAME, estimate))) +
geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe)) +
geom_point(color = "red", size = 3) +
labs(title = "Household income by county in Vermont",
subtitle = "2017-2021 American Community Survey",
y = "",
x = "ACS estimate (bars represent margin of error)")
v17 <- load_variables(2017, "acs5", cache = TRUE)
#2017 data, ACS5 = the 5 year sample or ACS1 = one year sample, cashe = save the data for easier loading.
View(v17)  ## view the variable codes for the set above, and can be used in get_decennial(geography = "state", variables = "USED HERE")
# or in get_acs(geography = "state", variables = "USED HERE")
runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
shiny::runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/AppDesign')
runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/AppDesign')
runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/AppDesign')
runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/AppDesign')
install.packages(c("fs", "ggplot2", "gtable", "openssl"))
shiny::runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/AppDesign')
install.packages("shinydashboard")
knitr::opts_chunk$set(echo = TRUE)
v17 <- load_variables(2017, "acs5", cache = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
##Way to check if already downloaded, and if not, download it:
if (!require(tidycensus)) install.packages("tidycensus"); require(tidycensus)
#Also installing packages needed for examples here:
if (!require(tidyverse)) install.packages("tidyverse"); require(tidyverse)
if (!require(ggplot2)) install.packages("ggplot2"); require(ggplot2)
census_api_key("308afb6a1b31e9fca538c651400ae9f1c3026131", install = TRUE)
shiny::runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/AppDesign')
runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
runApp('C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/app1.R')
setwd("C:/Users/Spencer/Desktop/MedtroidJam/BFIX-551-Final-project/Final Project/AppDesign")
runApp()
options(tigris_use_cache = TRUE)
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)) install.packages("tidyverse"); require(tidyverse)
if (!require(leaflet)) install.packages("leaflet"); require(leaflet) #leaflet library for interactive maps
if (!require(sf)) install.packages("sf"); require(sf) #sf library for spatial data manipulation
if (!require(ggplot2)) install.packages("ggplot2"); require(ggplot2)
if (!require(shiny)) install.packages("shiny"); require(shiny)
if (!require(tidycensus)) install.packages("shiny"); require(tidycensus) #for accessing US Census Bureau data
# Set your census API key
census_api_key("70ef9b17b0bebe70074471ca4ff3f92b342b1692")
# Fetch and prepare the data outside of the Shiny server function
#Variables_ALL <- load_variables(2022,"acs5")
# Fetch and prepare the data outside of the Shiny server function
MultiYear<-data.frame()
years<-c(2022, 2021, 2020, 2019, 2018)
for(y in 1:length(years)){
acs_data <- get_acs(
geography = "state", #geographic level of data to retrieve(so in this case state level)
variables = list(    #Specifying the variables to retrieve from ACS
migration_age = "B07001_005",           #Variable for age 20-24
migration_agey= "B07001_006",           #Variable for age 25-29
migration_bothgender="B07003_001", #variable for gender
migration_male="B07003_002",
migration_female="B07003_003",
migration_income="B07010_001" #variable for migration based on income
),
year = years[y]                 ,     #the year of ACS data to retrieve
geometry = TRUE  #geographic boundaries
) |>
mutate(Variable = case_when(variable == "migration_age" ~ "Migration Age 20-24",
variable == "migration_gender" ~ "Migration Gender",
variable == "migration_income" ~ "Migration Total Income $75,000",
variable == "migration_bothgender"~"Migration All Genders",
variable == "migration_female"~"Migration Female",
variable == "migration_male"~"Migration Male",
variable == "migration_agey"~"Migration Age 25-29")) |>
#columns to exclude
dplyr::select(-moe, -GEOID, -variable) |>
#transforming the dataset from a long format to a wide format
pivot_wider(names_from = Variable, values_from = estimate) |>
#filtering data the continental US states only
filter(!NAME %in% c("Alaska", "Puerto Rico", "Hawaii")) |>
mutate(Year=years[y])
MultiYear<-rbind(MultiYear, acs_data)
}
#predictions*
ui <- fluidPage(
titlePanel("Interactive Map with Census Data"), #creating a title to display it on top
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of data you want to see:",
choices = list("Gender" = "G", "Gender Gap Index" = "Gender Gap Index")),
# Second input (choices depend on the choice for the first input)
uiOutput("secondSelection"),
# Third input (choices depend on the choice for the first and second input)
uiOutput("thirdSelection")
),
leafletOutput("map")                            # creating a placeholder for a Leaflet map in the UI
)
runApp()
runApp()
